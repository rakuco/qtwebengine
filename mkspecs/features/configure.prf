# Load configure.prf from qtbase first
load(configure)
load(functions)
load(platform)

defineTest(runConfigure) {

    !exists(src/3rdparty/chromium) {
        skipBuild("Submodule qtwebengine-chromium does not exist. Run 'git submodule update --init'.")
        return(false)
    }

    WSPC = $$find(OUT_PWD, \\s)
    !isEmpty(WSPC) {
        skipBuild("QtWebEngine cannot be built in a path that contains whitespace characters.")
        return(false)
    }

    !isPlatformSupported() {
        # make sure we have skipBuildReason
        isEmpty(skipBuildReason): skipBuild("Unknow error. Platform unspported")
        return(false)
    }

    unix:!macos:contains(QT_CONFIG,no-pkg-config) {
        skipBuild("pkg-config is required")
        return(false)
    }

    include($$QTWEBENGINE_OUT_ROOT/qtwebengine-config.pri)
    QT_FOR_CONFIG += webengine-private

    !qtConfig(webengine-gperf) {
        skipBuild("Required gperf could not be found.")
        return(false)
    }
    !qtConfig(webengine-bison) {
        skipBuild("Required bison could not be found.")
        return(false)
    }
    !qtConfig(webengine-flex) {
        skipBuild("Required flex could not be found.")
        return(false)
    }
    !qtConfig(webengine-python2) {
        skipBuild("A suitable version of python2 could not be found.")
        return(false)
    }

    sanitizer: !qtConfig(webengine-sanitizer) {
        skipBuild("Chosen sanitizer configuration is not supported. Use --feature-webengine-sanitizer=yes to force build with the chosen sanitizer configuration.")
        return(false);
    }

    unix:!macos {
        !qtConfig(webengine-system-glibc) {
            skipBuild("A suitable version of libc could not be found. See: https://sourceware.org/bugzilla/show_bug.cgi?id=14898")
            return(false)
        }

        QT_FOR_CONFIG += gui-private

        !qtConfig(webengine-system-khr) {
            skipBuild("khronos development headers appear to be missing (mesa/libegl1-mesa-dev)")
            return(false)
        }

        for(package, $$list("nss dbus fontconfig")) {
            !qtConfig(webengine-system-$$package) {
                skipBuild("A suitable version of $$package could not be found.")
                return(false)
            }
         }

        !qtConfig(webengine-embedded-build): qtConfig(xcb) {
             for(package, $$list("libdrm xcomposite xcursor xi xrandr xtst")) {
                 !qtConfig(webengine-system-$$package) {
                     skipBuild("A suitable version of $$package could not be found.")
                     return(false)
                 }
             }
        }
    }
}

